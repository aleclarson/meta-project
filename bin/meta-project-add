#!/usr/bin/env node

const addToGitIgnore = require('../lib/addToGitIgnore');
const addToMetaFile = require('../lib/addToMetaFile');
const find = require('find-file-recursively-up');
const fs = require('fs');
const program = require('commander');
const debug = require('debug')('meta-project-add');
const exec = require('meta-exec');
const mkdirp = require('mkdirp');
const path = require('path');
const util = require('util');

const usage = `\n  usage:\n\n    meta project add <destFolder> <childRepoUrl>\n`;

if ( ! process.argv[2] || process.argv[2] === '--help')
  return console.log(usage);

const destFolder = process.argv[2] === 'blank' ?
                      process.argv[3] :
                      process.argv[2];

const repoUrl = process.argv[3] === 'blank' ?
                      process.argv[4] :
                      process.argv[3];

if ( ! destFolder || ! repoUrl) return console.log(usage);

const dirname = path.basename(repoUrl).replace('.git', '')

console.log(`meta project adding \'${repoUrl}\' at ${destFolder}`);

// meta project add <folder> <repo>

mkdirp(destFolder, (err) => {
  if (err) throw err;

  const dir = path.join(process.cwd(), destFolder);

  console.log(`created ${dir}`);

  process.chdir(dir);

  exec({
    command: 'git init',
    dir: dir,
    suppressLogging: true,
  }, (err) => {
    if (err) throw err;

    exec({
      command: `git remote add origin ${repoUrl}`,
      dir: dir,
      suppressLogging: true,
    }, (err) => {
      if (err) throw err;

      console.log(`set remote origin to ${repoUrl}`);

      find('.meta', (err, metafilePath) => {
        if (err) throw err;

        addToMetaFile(metafilePath, destFolder, repoUrl)

        addToGitIgnore(metafilePath.replace(/.meta$/, '.gitignore'), destFolder);

      });

    });

  });

});